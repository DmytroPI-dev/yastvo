name: Build and Deploy Cafe Application

on:
  push:
    branches:
      - main 
  workflow_dispatch:

env:
  # Using new variables to avoid conflicts with the first project
  APP_NAME: ${{ vars.APP_NAME_CAFE || 'yastvo' }}
  SUBDOMAIN: ${{ vars.SUBDOMAIN_CAFE || 'cafe' }}

jobs:
  deploy:
    name: Deploy to Oracle Cloud VM
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          touch deploy-package.tar.gz
          tar --exclude-from='.gitignore' \
              --exclude='.git' \
              --exclude='venv' \
              --exclude='deploy-package.tar.gz' \
              -czf deploy-package.tar.gz .
      
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ORACLE_SSH_KEY }}" > ~/.ssh/id_rsa_oracle
          chmod 600 ~/.ssh/id_rsa_oracle
          echo "SSH_KEY_PATH=~/.ssh/id_rsa_oracle" >> $GITHUB_ENV

      - name: Upload to Oracle VM
        run: |
          scp -i ${{ env.SSH_KEY_PATH }} -o StrictHostKeyChecking=no deploy-package.tar.gz ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }}:/tmp/${{ env.APP_NAME }}_package.tar.gz

      - name: Deploy on Oracle VM
        run: |
          ssh -i ${{ env.SSH_KEY_PATH }} -o StrictHostKeyChecking=no ${{ secrets.ORACLE_USER }}@${{ secrets.ORACLE_HOST }} 'bash -s' <<'EOF'
            set -e # Exit immediately if a command fails

            # --- Variables ---
            APP_NAME="${{ env.APP_NAME }}"
            PROJECT_DIR="/home/${{ secrets.ORACLE_USER }}/${APP_NAME}"
            VENV_DIR="$PROJECT_DIR/venv"
            DB_NAME="${APP_NAME}_db"
            DB_USER="${APP_NAME}_user"
            # Use a different secret for the new DB password
            DB_PASSWORD="${{ secrets.DB_PASSWORD_CAFE }}"
            SUBDOMAIN="${{ env.SUBDOMAIN }}"
            DOMAIN_NAME="${{ secrets.DOMAIN_NAME }}"
            EMAIL="${{ secrets.EMAIL }}"



            # --- 1. Create New Database & User ---
            # Assumes MariaDB is already installed and running
            echo "=== Creating new MariaDB database and user for ${APP_NAME} ==="
            sudo mysql -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME};"
            sudo mysql -e "CREATE USER IF NOT EXISTS '${DB_USER}'@'localhost';"
            sudo mysql -e "ALTER USER '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';"
            sudo mysql -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
            sudo mysql -e "FLUSH PRIVILEGES;"


            # --- 2. Nginx Setup ---
            echo "=== Installing Certbot if missing ==="
            if ! command -v certbot >/dev/null 2>&1; then
              sudo apt install -y certbot python3-certbot-nginx
            fi
  
            DOMAIN_FQDN="${SUBDOMAIN}.${DOMAIN_NAME}"
            if sudo certbot certificates | grep -q "Domains: $DOMAIN_FQDN"; then
            echo "Certificate for $DOMAIN_FQDN exists. Attempting renewal..."
            sudo certbot renew --nginx --quiet
            else
            echo "Certificate for $DOMAIN_FQDN not found. Requesting a new one..."
            sudo certbot --nginx -d "$DOMAIN_FQDN" --agree-tos --email "$EMAIL" --non-interactive
            fi

            # --- Configure Nginx ---
            echo "=== Configuring Nginx for HTTPS ==="
            sudo rm -f /etc/nginx/sites-enabled/default
            sudo tee /etc/nginx/sites-available/${APP_NAME} > /dev/null <<NGINX_CONF
            server {
            listen 80;
            server_name ${DOMAIN_FQDN};
            # Redirect all HTTP traffic to HTTPS
            return 301 https://\$host\$request_uri;
            }

          server {
              listen 443 ssl;
              server_name ${DOMAIN_FQDN};

              # SSL configuration from Certbot
              ssl_certificate /etc/letsencrypt/live/${DOMAIN_FQDN}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_FQDN}/privkey.pem;
              include /etc/letsencrypt/options-ssl-nginx.conf;
              ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

              # Application configuration
              location = /favicon.ico { access_log off; log_not_found off; }              
              
              location /static/ {
                  alias ${PROJECT_DIR}/static/;
              }

              location / {
                  include proxy_params;
                  proxy_pass http://unix:/run/${APP_NAME}.sock;
              }
          }
          NGINX_CONF

            sudo ln -sf /etc/nginx/sites-available/${APP_NAME} /etc/nginx/sites-enabled/
            sudo nginx -t
            sudo systemctl restart nginx

            
            echo "=== Verifying Nginx service is active ==="
            sudo systemctl is-active --quiet nginx

            

            # --- 3. Application Deployment ---
            echo "=== Setting up application directory ==="
            mkdir -p $PROJECT_DIR
            find $PROJECT_DIR -mindepth 1 -delete
            tar -xzf /tmp/${APP_NAME}_package.tar.gz -C $PROJECT_DIR
            rm /tmp/${APP_NAME}_package.tar.gz

            echo "=== Creating backend .env file ==="
            # Use a different secret for the new app's environment variables
            echo "${{ secrets.BACKEND_ENV_VARS_CAFE }}" > $PROJECT_DIR/.env
            chmod 600 $PROJECT_DIR/.env


            # --- 4. Python Environment & Dependencies ---
            echo "=== Setting up Python virtual environment ==="
            sudo apt-get update -y
            sudo apt-get install -y libxml2-dev libxslt1-dev python3-pip python3-dev python3-setuptools python3-wheel libpq-dev build-essential
            cd $PROJECT_DIR
            python3 -m venv $VENV_DIR
            source $VENV_DIR/bin/activate
            pip install --upgrade pip
            pip install -r $PROJECT_DIR/requirements.txt
            

            # --- 5. Django Setup ---
            echo "=== Running Django migrations and collecting static files ==="
            python $PROJECT_DIR/manage.py migrate
            python $PROJECT_DIR/manage.py collectstatic --noinput

            echo "=== Setting project directory permissions ==="
            sudo chown -R ${{ secrets.ORACLE_USER }}:www-data $PROJECT_DIR
            sudo chmod -R 775 $PROJECT_DIR


            echo "=== Creating Django superuser (if it does not exist) ==="
            set -a
            source $PROJECT_DIR/.env
            set +a
            python $PROJECT_DIR/manage.py createsuperuser --no-input || true
            
            deactivate


            # --- 6. Gunicorn Service Setup for New App ---
            echo "=== Creating Gunicorn systemd socket file for ${APP_NAME} ==="
            sudo tee /etc/systemd/system/${APP_NAME}.socket > /dev/null <<GUNICORN_SOCKET
            [Unit]
            Description=gunicorn socket for ${APP_NAME}

            [Socket]
            ListenStream=/run/${APP_NAME}.sock
            SocketUser=${{ secrets.ORACLE_USER }}
            SocketGroup=www-data
            SocketMode=0660

            [Install]
            WantedBy=sockets.target
          GUNICORN_SOCKET

            echo "=== Creating Gunicorn systemd service file for ${APP_NAME} ==="
            sudo tee /etc/systemd/system/${APP_NAME}.service > /dev/null <<GUNICORN_SERVICE
            [Unit]
            Description=gunicorn daemon for ${APP_NAME}
            Requires=${APP_NAME}.socket
            After=network.target

            [Service]
            User=${{ secrets.ORACLE_USER }}
            Group=www-data
            WorkingDirectory=${PROJECT_DIR}
            ExecStart=${VENV_DIR}/bin/gunicorn --workers 3 Yastvo.wsgi:application

            [Install]
            WantedBy=multi-user.target
          GUNICORN_SERVICE
            
            echo "=== Restarting and enabling Gunicorn socket and service ==="
            sudo systemctl daemon-reload
            sudo systemctl restart ${APP_NAME}.socket
            sudo systemctl restart ${APP_NAME}.service
            sudo systemctl enable ${APP_NAME}.socket
            
            echo "=== Deployment successful for ${APP_NAME}! ==="
          EOF
